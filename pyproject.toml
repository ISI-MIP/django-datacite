[build-system]
requires = ["setuptools", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "django-datacite"
authors = [
    { name = "Jochen Klar", email = "jochen.klar@pik-potsdam.de" },
]
maintainers = [
    { name = "Jochen Klar", email = "jochen.klar@pik-potsdam.de" },
]
description = """
A Django app to properly model the DataCite Metadata Schema in a relational database,
with full integration into the Django admin interface."""
readme = "README.md"
requires-python = ">=3.8"
license = { file = "LICENSE" }
classifiers = [
    'Operating System :: OS Independent',
    'License :: OSI Approved :: MIT License',
    'Programming Language :: Python :: 3.8',
    'Programming Language :: Python :: 3.9',
    'Programming Language :: Python :: 3.10',
    'Programming Language :: Python :: 3.11',
]
dependencies = [
    "datacite~=1.1.2",
    "Django>=3.2.0",
    "requests>=2.25.0"
]
dynamic = ["version"]

[project.optional-dependencies]
dev = [
    "build",
    "pre-commit",
    "ruff",
    "twine",
]
pytest = [
    "dj_database_url~=2.0.0",
    "pytest~=7.4.0",
    "pytest-cov~=4.1.0",
    "pytest-django~=4.5.2",
    "pytest-dotenv~=0.5.2",
    "requests-mock~=1.11.0"
]

[project.urls]
Repository = "https://github.com/ISI-MIP/django-datacite"

[tool.setuptools.packages.find]
include = ["django_datacite*"]
exclude = ["*tests*"]

[tool.setuptools.package-data]
"*" = ["*"]

[tool.setuptools.dynamic]
version = { attr = "django_datacite.__version__" }

[tool.pytest.ini_options]
DJANGO_SETTINGS_MODULE = "config.settings"
testpaths = ["django_datacite"]
python_files = "test_*.py"
pythonpath = "testing/"

[tool.ruff]
target-version = "py38"
line-length = 120
select = [
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "E",    # pycodestyle
    "F",    # pyflakes
    "I",    # isort
    "PGH",  # pygrep-hooks
    "RUF",  # ruff
    "UP",   # pyupgrade
    "W",    # pycodestyle
    "YTT",  # flake8-2020
]
ignore = [
    "B006",   # mutable-argument-default
    "B007",   # unused-loop-control-variable
    "B018",   # useless-expression
    "RUF012", # mutable-class-default
]

[tool.ruff.isort]
known-first-party = [
    "django_datacite"
]
section-order = [
  "future",
  "standard-library",
  "pytest",
  "django",
  "rest_framework",
  "third-party",
  "first-party",
  "local-folder"
]

[tool.ruff.isort.sections]
pytest = ["pytest"]
django = ["django"]
rest_framework = ["rest_framework"]
